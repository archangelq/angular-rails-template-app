{"name":"Elvis Sandwich","tagline":"Rails, AngularJS, and Bootstrap go together like peanut butter, banana and bacon","body":"Want to get working with Rails, AngularJS, and Bootstrap quick and easy? Don't want to have to worry\r\n about getting your angular app working with the asset pipeline? Here's the place to get started.\r\n\r\nIf you haven't already, create your new app like so:\r\n\r\n```\r\nrails new myapp -T -m https://raw.github.com/archangelq/elvis_sandwich/master/angular_rails_application_template.rb\r\n```\r\n\r\nFire up your new app with `rails server`, go to localhost:3000, and you should be presented with\r\n this readme, as well as some simple output from your running AngularJS app, listing the cool stuff\r\n you have installed and working!\r\n\r\nThis template also includes the very useful\r\n [`ui-router`](https://github.com/angular-ui/ui-router) and\r\n [`ui-bootstrap`](http://angular-ui.github.io/bootstrap/) angular module, as well as the\r\n [`angular-rails-template`](https://github.com/dmathieu/angular-rails-templates)  and\r\n [`angularjs-rails-resource`](https://github.com/FineLinePrototyping/angularjs-rails-resource) gems.\r\n\r\nHappy Coding!\r\n\r\n## What's included ##\r\n\r\nAll of the Angular code lives in the `app/assets/javascripts/ng-app` folder.\r\n If you are reading this file from your newly created app, you are reading the output\r\n of `templates/coolThings.html.erb` file. Start making modifications to it, reload your browser,\r\n and you should see them show up!\r\n\r\nAlso included are `controllers/cool-things.js` and `services/cool-things.js`. \r\n These load the list of cool things from the Rails server, from the\r\n ApplicationController#cool_things method, at route /cool-things, demonstrating\r\n bare bones usage of the `angularjs-rails-resource` gem.\r\n\r\n## Testing ##\r\n\r\n[RSpec](http://rspec.info/) and [Cucumber](http://cukes.info/)\r\n are included for Rails testing. No default tests are set up. In future\r\n the ApplicationController#cool_things method may be unit and integration tested.\r\n\r\n[Karma](http://karma-runner.github.io/0.10/index.html) and\r\n [Jasmine](http://pivotal.github.io/jasmine/) are included for Angular testing.\r\n Because of the complexity of\r\n setting this up correctly, two basic spec files are included in the `spec/javascripts` directory.\r\n These unit test the controller and service above. You can run them with `rake test:karma` to\r\n start the karma server and file watcher running, or `rake test:karma:once` to see the results\r\n of a single test run. My thanks to the author of\r\n [`rails-angular-karma-example`](https://github.com/monterail/rails-angular-karma-example)\r\n for a great starting place to create the rake task that I've included along with this to make\r\n firing up and tearing down the Karma server easy.\r\n\r\n## A note on referencing templates ##\r\n\r\nIn order to load the templates that the `angular-rails-template` gem inlines for you \r\n from the ui-router, you'll\r\n need have the url be `ng-app/templates/<template_filename>`, rather than simply\r\n `<template_filename>`, due to the way that Rails' Asset Pipeline works. Note that this\r\n allows you to add .erb on to the end of files, and have it be processed by ERB before\r\n being streamlined into the templateCache, as well as any of the other things you can do with\r\n the Rails asset pipeline, including using Coffeescript, Haml, etc.\r\n\r\n\r\n### Caveats ###\r\nThis template assumes you are starting a new app. It removes certain conflicting files,\r\n such as the ApplicationController and application layout files.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}